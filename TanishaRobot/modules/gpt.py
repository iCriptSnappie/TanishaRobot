import requests
from TanishaRobot import telethn as tbot
from TanishaRobot.events import register

GPT_API_URL = "https://chatgpt.apinepdev.workers.dev"

@register(pattern="^/gpt(?: (.*)|$)")
async def chat_gpt(event):
    if event.fwd_from:
        return

    query = event.pattern_match.group(1)

    if not query:
        if event.reply_to_message:
            replied_msg = await event.get_reply_message()
            if replied_msg and replied_msg.text:
                query = replied_msg.text
            else:
                await event.reply("‚ùç ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ö·¥è·¥ás …¥·¥è·¥õ ·¥Ñ·¥è…¥·¥õ·¥Ä…™…¥ ·¥õ·¥áx·¥õ.")
                return
        else:
            await event.reply("‚ùç ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥Ä“ì·¥õ·¥á Ä ·¥õ ú·¥á /…¢·¥ò·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á.")
            return

    # Send "Please wait" message
    processing_message = await event.reply("üí≠")

    try:
        # Make a request to GPT API
        response = requests.get(f"{GPT_API_URL}/?question={query}")

        if response.status_code == 200:
            # Extract the answer from the API response
            result = response.json()

            # Check if "join" key is present and remove it
            if "join" in result:
                del result["join"]

            # Add signature to the answer
            answer = result.get("answer", "‚¨§ …¥·¥è ·¥Ä…¥s·¥°·¥á Ä  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ ·¥Ä…™.")
            signature = "\n\n‚ùñ ·¥Ä…¥s·¥°·¥á Ä…™…¥…¢  ô è ‚û• [‡πõ·¥õ ·¥Ä …¥ …™ s  ú ·¥Ä ‚ô°„Çô](https://t.me/ll_Feelings_ll)"
            reply_message = answer + signature

            # Edit the "Please wait" message with the final answer
            await processing_message.edit(reply_message)
        else:
            # If there's an error with the API, inform the user
            await processing_message.edit("‚¨§ ·¥á Ä Ä·¥è Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥Ñ·¥Ä·¥õ…™…¥…¢ ·¥°…™·¥õ ú s·¥è ü·¥†·¥á ·¥Ä·¥ò…™.")
    except requests.exceptions.RequestException as e:
        # Handle network-related errors
        await processing_message.edit(f"‚¨§ ·¥á Ä Ä·¥è Ä ‚û• {str(e)}. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.")
    except Exception as e:
        # Handle unexpected errors
        await processing_message.edit(f"‚¨§ ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä ‚û• {str(e)}. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.")
